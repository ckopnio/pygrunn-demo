services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - app-network

  redis-commander:
    build:
      context: .
      dockerfile: docker/redis-commander/Dockerfile
    container_name: redis-commander
    hostname: redis-commander
    networks:
      - app-network
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    depends_on:
      - redis

  postgres:
    image: postgres
    container_name: subscription_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: subscriptions
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    user: pgadmin
    volumes:
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - app-network
    environment:
      PGADMIN_DEFAULT_EMAIL: demo@pygrunn.nl
      PGADMIN_DEFAULT_PASSWORD: pygrunn
      PGADMIN_PORT: 80
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_SERVER_JSON_FILE: /pgadmin4/servers.json
    ports:
      - "${PGADMIN_PORT:-80}:80"
    depends_on:
      - postgres

  subscription-service:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    command: faststream run cdc_demo.subscription_service.app:app
    deploy:
      replicas: 3
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_started
    networks:
      - app-network

  sink-service:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    command: faststream run cdc_demo.sink_service.app:app
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_started
    networks:
      - app-network

  statistic-service:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    command: faststream run cdc_demo.statistic_service.app:app
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_started
    networks:
      - app-network

  superset:
    build:
      context: .
      dockerfile: docker/superset/Dockerfile
    container_name: superset
    environment:
      - SUPERSET_SECRET_KEY=supersecret
    ports:
      - "${SUPERSET_PORT:-8088}:8088"
    networks:
      - app-network
    volumes:
      - ./docker/superset/dashboard.zip:/app/dashboard.zip
    depends_on:
      statistic-service:
        condition: service_started
    command: >
      /bin/bash -c "
        superset db upgrade &&
        superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin &&
        superset init &&
        superset import-dashboards -p /app/dashboard.zip -u 'admin' &&
        superset run -h 0.0.0.0 -p 8088
      "
    restart: unless-stopped


networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local